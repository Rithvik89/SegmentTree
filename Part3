struct segtree
{
  ll size;
  vector<pair<ll,ll>>v;
  void init(ll n)
  {
    size=1;
    while(size<n){size*=2;}
    v.assign(2*size,mp(INT_MAX,0));
  }
  void set(ll i,ll x,ll node,ll lx,ll rx)
  {
    if(lx==rx)
    {
      v[node].F=x;v[node].S=1;
    }
    else
    {
      ll m=(lx+rx)/2,temp=0;
      if(i<=m)
      {
        set(i,x,2*node+1,lx,m);
      }
      else
      {
        set(i,x,2*node+2,m+1,rx);
      }
      v[node].F=min(v[2*node+1].F,v[2*node+2].F);
      if(v[2*node+1].F==v[node].F)
      {
         temp+=v[2*node+1].S;
      }
      if(v[2*node+2].F==v[node].F)
      {
        temp+=v[2*node+2].S;
      }
      v[node].S=temp;
    }
  }
  void set(ll i,ll x)
  {
    set(i,x,0ll,0ll,size-1);
  }
  pair<ll,ll> mini_(ll l,ll r,ll lx,ll rx,ll node)
  {
    if(r<lx||l>rx)
    {
      return mp(INT_MAX,1);
    }
    else if(lx>=l&&rx<=r)
    {
      return mp(v[node].F,v[node].S);
    }
    else 
    {
      ll m=(lx+rx)/2,sum=0;
      pair<ll,ll> temp,temp1,temp2;
      temp1=mini_(l,r,lx,m,2*node+1);temp2=mini_(l,r,m+1,rx,2*node+2);
      temp.F= min(temp1.F,temp2.F);
      if(temp.F==temp1.F)
      {
        sum+=temp1.S;
      }
      if(temp.F==temp2.F)
      {
        sum+=temp2.S;
      }
      temp.S=sum;
      return temp;
    }
  }
  pair<ll,ll> mini_(ll l,ll r)
  {
    return mini_(l,r,0ll,size-1,0);
  }
  void display()
  {
    for(ll i=0;i<2*size;i++)
    {
      cout<<v[i].F<<" "<<v[i].S<<endl;
    }
    cout<<endl;
  }
};
